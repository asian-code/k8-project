name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Add workflow dispatch for manual triggers
  workflow_dispatch:

# Add environment variables
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-east-2'
  ECR_FRONTEND_REPO: 'react-frontend'
  ECR_BACKEND_REPO: 'django-backend'

jobs:
  build-and-push-frontend:
    name: Build and Push Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install Dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Lint
      run: npm run lint
      working-directory: ./frontend

    - name: Run Tests
      run: npm test -- --coverage
      working-directory: ./frontend

    - name: Build React App
      run: npm run build
      working-directory: ./frontend
      env:
        CI: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:$IMAGE_TAG
        # Tag as latest if on main branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker tag $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:latest
        fi

  build-and-push-backend:
    name: Build and Push Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Run Linting
      run: |
        flake8 backend/
        black --check backend/
      continue-on-error: true

    - name: Run Tests
      run: |
        pytest backend/ --cov=backend --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:$IMAGE_TAG
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker tag $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:latest
        fi

  deploy:
    name: Deploy to Kubernetes
    needs: [build-and-push-frontend, build-and-push-backend]
    runs-on: ubuntu-latest
    # Only deploy on main branch
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0

    - name: Deploy monitoring stack
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
        
        helm upgrade --install prometheus prometheus-community/prometheus \
          --namespace monitoring \
          --set server.persistentVolume.size=50Gi \
          --version 15.10.1
          
        helm upgrade --install grafana grafana/grafana \
          --namespace monitoring \
          --set persistence.enabled=true \
          --set persistence.size=10Gi \
          --version 6.50.7

    - name: Deploy application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update the image tags in values file
        yq eval ".frontend.image.tag = \"$IMAGE_TAG\" | .backend.image.tag = \"$IMAGE_TAG\"" -i ./helm/values.yaml
        
        helm upgrade --install my-app ./helm \
          --namespace production \
          --create-namespace \
          --set frontend.image.repository=$ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }} \
          --set backend.image.repository=$ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }} \
          --atomic \
          --timeout 5m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/frontend -n production
        kubectl rollout status deployment/backend -n production